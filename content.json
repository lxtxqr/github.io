{"meta":{"title":"Sai","subtitle":null,"description":null,"author":null,"url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Excel实用技巧-VLOOKUP，SUMIF","slug":"excel_01","date":"2019-08-22T14:02:00.000Z","updated":"2019-08-22T14:33:23.633Z","comments":true,"path":"2019/08/22/excel_01/","link":"","permalink":"http://yoursite.com/2019/08/22/excel_01/","excerpt":"","text":"最近在统计数据的时候，使用Excel比较多 1.现实的案例需求，我需要根据客户指摘的ID匹配出在WBS中匹配出这本是谁做的。 使用VLOOKUP看下API VLOOKUP(lookup_value,table_array,col_index_num,range_lookup) 以下是使用案例SHEET1中作为基础数据存在 SHEET2中通过VLookUP函数匹配Sheet1中的数据 C3单元格使用的公式 =VLOOKUP($B$3,Sheet1!$B$3:$D$4,2,FALSE) 第一个参数为检索的原值，也就是ID，作为Where条件第二个参数为检索范围，指定为Sheet1的B3-&gt;D4这个范围第三个参数为匹配范围的第几列，1开始，2为C列，3为D列。第四个参数为模糊匹配和全部值匹配。 这里有一个$符号的意义，就在于锁定单元格，如果不去锁定，在COPY的时候，会根据行的左边自动改变的。比如现在的是B3，copy到D行，就变成D3。如果加上$符号后，拷贝后的公式内容不会被改变。 2.案例在项目中，统计表字段书，做了一个表格，但是需要计算个表的合计数，sum不好用，就像试试sumIF，结果是可以用。 首先还是看下SUMIF的API 接下来还是使用案例： 在B8中加入以下公式 =SUMIF($C$7:$F$7,$B$7,C8:F8) 就可以计算出小计中的值。 第一个参数为Title的范围。第二个参数为统计的名称第三个参数为统计的范围 注意：就是按照Title中指定名称统计的。计算相同名称列中的值的合计。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/tags/Excel/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Docker 拉取 oracle 11g镜像配置","slug":"docker_02","date":"2019-08-17T09:28:00.000Z","updated":"2019-08-17T11:41:24.836Z","comments":true,"path":"2019/08/17/docker_02/","link":"","permalink":"http://yoursite.com/2019/08/17/docker_02/","excerpt":"","text":"本文出处：https://blog.csdn.net/qq_38380025/article/details/80647620 话不多说 开始记录docker拉取阿里的oracle11g 镜像并进行配置， 用pl/sql 可以登录为最终结果 navicat连接是在最后一步这是我们所需要进行拉取oracle镜像的楼主所给出的说明 参考：https://blog.csdn.net/zwx521515/article/details/77982884 但是根据这个进行配置会有一些问题，所以写这篇记录一下，希望可以帮助其他人 开始： ①、开始拉取镜像-执行命令： docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g 下载的过程少长，等待吧，喝杯咖啡，休息一会！（镜像6.8G） 下载完成后 查看镜像： docker images 可以看到已经下载好了 ② 、创建容器 docker run -d -p 1521:1521 –name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g 这里说一下，命令后面的地址一定要是你下载的镜像地址也就是你拉取镜像名字，否则会出现名字已存在等问题！ 如果创建成功能会返回容器id③、启动容器 docker start oracle11g ④、进入镜像进行配置 1、 docker exec -it oracle11g bash 2、进行软连接 sqlplus /nolog 发现没有这个命令，用不了 3、切换到root 用户下 su root 密码：helowin 注意这里还是在容器当中。。有朋友退去了。。。。。。。 4、编辑profile文件配置ORACLE环境变量export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2 export ORACLE_SID=helowin export PATH=$ORACLE_HOME/bin:$PATH 在最后加上 保存并退出 ：wq 5、创建软连接 ln -s $ORACLE_HOME/bin/sqlplus /usr/bin 6、切换到oracle 用户 这里还要说一下，一定要写中间的内条 - 必须要，否则软连接无效 ⑤ 、登录sqlplus并修改sys、system用户密码 sqlplus /nolog conn /as sysdba 接着执行下面命令 alter user system identified by system; alter user sys identified by sys; 也可以创建用户 create user test identified by test; 并给用户赋予权限 grant connect,resource,dba to test; 注意了这里的坑开始出现了 当执行修改密码的时候出现 ： database not open 提示数据库没有打开，不急按如下操作 输入：alter database open; 注意了：这里也许还会提示 ： ORA-01507: database not mounted 不急！继续！ =========== 解决方法=========== 输入：alter database mount; 输入 ：alter database open; 然后就可执行 修改数据库密码的命令了 改完之后输入：ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; 刷新下表 exit 是退休sql 软连接 ⑥、使用pl/sql 进行连接 第7步是navicat连接的在最后 之前我们把端口映射到了1521上，所以我们需要进行配置 tnsnames.ora 几个朋友不知道ora文件在哪，所以添加了这一步 pl/sql 安装包，汉化包，秘钥工具 https://download.csdn.net/download/qq_38380025/11168289 plsql安装配置工具包 https://blog.csdn.net/qq_38380025/article/details/89677588docker_oracle11 = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.211.135)(PORT =1521)) ) (CONNECT_DATA = (SERVICE_NAME = orcl) )) 打开pl/sql 进行登录 ：提示监听程序当前无法识别连接描述符中请求的服务 这时我们需要去看一下oracle 的 lsnrctl 服务 看到这两个了么，任选其一，修改 tnsnames.ora的 service_name=helowinXDB docker_oracle11 = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.211.135)(PORT =1521)) ) (CONNECT_DATA = (SERVICE_NAME = helowinXDB) )) 欧克，登录成功。 第7步是navicat连接 有几个朋友用的是navicat连的所以故此添加这一步 打开navicat后（navicat12不用配置oci.dll文件了） 直接新建连接","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Wijmo-FlexGrid使用技巧","slug":"wijmo_05","date":"2019-08-11T14:07:00.000Z","updated":"2019-08-11T14:07:09.186Z","comments":true,"path":"2019/08/11/wijmo_05/","link":"","permalink":"http://yoursite.com/2019/08/11/wijmo_05/","excerpt":"","text":"工作种总结的经验 1.Grid滚动条的位置指定 this.flexGrid.scrollPosition = new wjcCore.Point(0, this.flexGrid.scrollPosition.y); 2.FlexGrid光标位置设定 const cellRange = new CellRange(2, 2, 2, 2); this.flexGrid.selection = cellRange; 3.FlexGrid的Header部分的内容局中心显示 cell.innerHTML = 'XXXX'; 4.CSS样式优先匹配 :host ::ng-deep使用。 Css最优先匹配【:host ::ng-deep】","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Wijmo","slug":"Wijmo","permalink":"http://yoursite.com/tags/Wijmo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Wijmo-FlexGrid的列头合并","slug":"wijmo_04","date":"2019-08-11T14:00:00.000Z","updated":"2019-08-11T14:04:37.607Z","comments":true,"path":"2019/08/11/wijmo_04/","link":"","permalink":"http://yoursite.com/2019/08/11/wijmo_04/","excerpt":"","text":"WijmoJS对于表格提供2种控件第一种是FlexGrid，第二种是MultiRow不同点在于FlexGrid：针对于一行数据，表头可以合并MultiRow：一行数据可以多行表示，表头不可以合并，必须于明细部分保持一致。 FlexGrid的Header头合并TS代码 import { FlexGridFilter } from 'wijmo/wijmo.grid.filter'; // 获取画面的FlexGrid控件 @ViewChild('gridsetting') setGrid: WjFlexGrid; // 设定header部的为可合并，5，6列合并。 gridEdit(dataList: object[]) { this.setGrid.allowMerging = AllowMerging.ColumnHeaders; this.setGrid.columnHeaders.rows[0].allowMerging = true; this.setGrid.columnHeaders.columns[5].AllowMerging = true; this.setGrid.columnHeaders.columns[6].AllowMerging = true; }","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Wijmo","slug":"Wijmo","permalink":"http://yoursite.com/tags/Wijmo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"终于等到你！鸿蒙系统震撼发布！","slug":"kj_news_01","date":"2019-08-11T10:27:00.000Z","updated":"2019-08-11T13:18:06.245Z","comments":true,"path":"2019/08/11/kj_news_01/","link":"","permalink":"http://yoursite.com/2019/08/11/kj_news_01/","excerpt":"","text":"本文转载至科技负能量的订阅号鸿蒙一开天地宽,中华有为! 8月9日，在今日召开的华为全球开发者大会上，华为正式发布全新的、基于微内核的、面向全场景的、分布式操作系统——鸿蒙OS。请注意，这是真正意义上可以和Windows、Android、iOS比肩的操作系统，而不是UI，因此备受关注。 微内核、全场景都是什么？又为什么说鸿蒙面向未来？ 余承东表示，安卓有超过1亿行代码，内核就超过2000万行，但一般用户用到的代码不到8%，整体比较冗余，在IoT时代这既没必要也不需要。 而鸿蒙系统采用了“微内核”的设计理念，区别于安卓等系统的“宏内核”。 微内核设计的基本思想是简化内核功能，微内核只提供最基础的服务，比如多进程调度和多进程通信等。 微内核下，采用同一套内核，却可以针对不同硬件做不同的UI界面，提升效率。举例来说，手机和车载设备不同，用户需求根本不一样，没有必要采相同的系统，但它们可以采用同样的内核，再做不同的界面和功能。 我们回想一下，从前汽车里装的，是又小又不能更新的导航。如今，汽车中控台都变成了一块巨大的平板电脑，可是如何与汽车交互？各村有各村的高招——宝马的iDrive、奥迪的MMI、奔驰的MBUX…… 交互方式五花八门，但是没有一个能做到轻松上手，广泛兼容。因为做操作系统这事儿，压根就不是车企的专长。这个江湖也许早该统一了，这就是鸿蒙的舞台。 同样的，AloT、智能电视、工业4.0，这些在安卓诞生之际，都是不存在的概念，那时候，谁能预见到“系统”的需求会这么大？鸿蒙的微内核意义就在这里，一个到处都在“等系统用”的时代，不管是汽车、电视、厂里的工业控制，一套鸿蒙，轻微加工，就能直接用！那么问题来了，支持的设备这么多，鸿蒙到底支不支持手机系统啊？ 支持，当然支持！！！ 谈及鸿蒙OS是否能用在手机上，余承东说“当然能用”，而且随时可用，比安卓更流畅、更安全，更加面向未来。但是考虑到安卓生态，华为会优先使用安卓，而且从安卓应用迁移到鸿蒙生态，非常便捷。 安卓短板全补齐 天然无Root更安全！ 安全性方面，余承东表示鸿蒙OS不像安卓，天然无root。安卓root权限一旦被获取，就像掌握了大门的钥匙，整个系统即被攻破。 而鸿蒙OS微内核天然没有root，这样可以从源头提升系统安全性。微内核每个部分都有把锁，只靠一把钥匙无法获得所有权限，这样一来会更安全。此外，鸿蒙OS内部保留了Linux内核，兼容安卓应用，未来华为希望鸿蒙OS内核能代替所有内核。 天生流畅 性能上，鸿蒙系统使用确定时延引擎、高性能IPC两大技术，解决现有系统性能不足的问题。 怎么理解确定时延引擎？其实很容易理解，这个引擎“知道”任务的优先级，能够进行调度处理——我明明在打着手游，在后台的微信却吃了我不少的运存，这可不行。明摆着游戏的优先级高更高，这个时候，游戏这个应用的资源将优先保障调度，应用响应时延降低25.7%。 鸿蒙今年用在电视上，未来电脑、手表、汽车都能用 今年，鸿蒙OS 1.0版将首发搭载在智慧屏也就是电视产品上。 插播预告：明天，科技富能量将在广州直击荣耀智慧屏的发布实况，体验搭载鸿蒙OS的首款产品，敬请关注！ 明年，鸿蒙OS 2.0将推出，其中内核和应用框架实现完全自研，面向产品包括创新的国产PC、手表、车载设备等。 2021年，我们会见到鸿蒙OS 3.0，用于音箱、耳机，2022年用于VR眼镜等更多设备。 会上，余承东表示，鸿蒙OS兼容Unix、Linux、安卓等，可部署在手机上，从安卓迁移到鸿蒙只需1~2天时间。 在会后的采访中，余承东透露，鸿蒙系统的研发投入了4000-5000人，已经在华为手机上测试完成。鸿蒙OS原计划明年发布，而美国封杀加速了这一自研OS的发布进程。 坚持开源 余承东最后介绍，鸿蒙是面向下一代的操作系统，坚持开源，鼓励全球开发者参与开发。考虑到生态和合作伙伴的原因，华为优先支持安卓系统，如果未来安卓不能使用，可以随时迁移到自有的鸿蒙系统，而合作开发者迁移的工作量也会很小。 余承东在会后接受采访时表示，“我们不是追赶，而是领先。对一个国家来说有领先的下一代 OS，对国家信息产业是好消息。” 还没看够瘾？转场EMUI 10，也很牛逼！ 爆改安卓！EMUI 10提升惊人 谁说安卓不耐用？EMUI 10用30个月慢不到6%！ 相比重新再造OS，UI相对更容易，和我们的距离也更近一些。华为消费者业务软件部总裁王成录带来了全新的EMUI 10.0。 在EMUI此前“18个月不卡顿”的基础上更进一步，实现30个月性能劣化低于6%。就算是老机型，也能升级适配，让更多用户享受到最新科技。王成录预计EMUI10将有1.5亿用户，升级率将达到90%，超过苹果iOS 12。 全新的UI，当然首先会带来全新的界面。一些常用的图标，华为重新做了设计。另外，提供了最近流行的深色模式，也为夜间使用带来了更好的体验。 值得一提的是，EMUI把这种深色模式的接口也开放给了第三方APP，如果开发者原因，只需要简单的指令，就能让APP实现深色效果。换句话说只要腾讯的开发者愿意，夜里的微信也可以不再晃眼了。 打破Windows与安卓壁垒：实现双系统同屏操作 核心机制方面，EMUI10已经开始为鸿蒙OS积累经验了。它在底层就采用了类似鸿蒙OS的分布式技术，让开发者一次开发，就可以部署到多个终端。比如电视、手表和手机上的软件，一次软件编写，三个平台统统搞定。大大减少了码农的工作量。 EMUI10支持多屏协同、跨应用跨系统，提供高效办公体验。而且支持双系统同屏操作、免切换，让PC键盘、鼠标、显示器等，都可以成为手机外设。 更重要的是，EMUI10支持数据在设备间无缝流转，三方应用支持钉钉、WPS、微信、QQ，原生应用支持图库、文件管理器、邮件、备忘录和录音机等。无论在哪，无论何种设备，只要运行EMUI10，这些软件里呈现的都是相同的用户内容。 第一款搭载EMUI10正式版的产品已经确定，是华为9月底即将发布的年度旗舰机Mate30，在此之前，9月中旬，EMUI10的内测版，将会开放给华为P30的用户。 国外网友已经开始了热议，这……怎么好像比咱们还要激动？？","categories":[{"name":"科技","slug":"科技","permalink":"http://yoursite.com/categories/科技/"}],"tags":[{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://yoursite.com/tags/鸿蒙/"}],"keywords":[{"name":"科技","slug":"科技","permalink":"http://yoursite.com/categories/科技/"}]},{"title":"2019 瓦房店的海边之旅","slug":"note_02","date":"2019-08-11T09:40:00.000Z","updated":"2019-08-11T10:04:12.727Z","comments":true,"path":"2019/08/11/note_02/","link":"","permalink":"http://yoursite.com/2019/08/11/note_02/","excerpt":"","text":"周六7:00顶着晨光出发了，3家人奔着同一个方向行进【沈阳-&gt;瓦房店】。开车还是有点长的，大概4个小时不到，到达目的地。行进257公里，自驾到达目的地。人还行，不是很多，8月基本上最后的赶海的日子了。 赶紧简单吃点，下海。不过，海真的不干净，很多水草和停留的船，海边的人还是很多的。搭起帐篷，带着儿子下海。 对比去年的东戴河（渤海），瓦房店（渤海）的海真的不咋地~没有比较就没有伤害，竟然来了，还是下去玩来吧。 可惜这次赶上来台风“利奇马”，刚刚玩来2个小时开始下雨。哇去。 海边还是有一个期待，就是海鲜大餐。不管海咋样，吃的还不很丰盛的。 打扑克，打游戏，一天结束。 周日早起赶海，是必须的。小土豆们早早4点就起床，可惜有点遗憾，外面下着小雨，这挡不住我们前进的脚步。出发。 收获只能说是一点点。退潮真的太近来。小鱼小虾都哪里去了。 吃过早饭，赶紧回家~ “利奇马”，打不过 我们跑吧。 记录2019年的赶海之旅。 2天500+公里。第一次自驾的长途之旅。有点小累","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}]},{"title":"JAVA 数组排序的注意点","slug":"java_01","date":"2019-08-09T04:21:00.000Z","updated":"2019-08-09T04:32:05.842Z","comments":true,"path":"2019/08/09/java_01/","link":"","permalink":"http://yoursite.com/2019/08/09/java_01/","excerpt":"","text":"在项目中，新人经常会遇到数组排序的使用错误。细心的新人会测试出这个问题。对于解决案，比较简单。 Array.sort方法 假如数据是 let arr:Array = [ {name:'SIGEN000016'}, {name:'S_010102'}, {name:'S_010101'} ]; 使用 arr = itemsR2.sort((n1, n2) => n1.name - n2.name) ; 排序结果 SIGEN000016 -> S_010102 -> S_010101 // 正确的做法 arr = arr.sort( function (n1, n2) { if (n1.name < n2.name ) { return -1; } if (n1.name > n2.name ) { return 1; } } return 0; ); 排序结果 SIGEN000016 -> S_010101 -> S_010102","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/tags/JAVA/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Wijmo-FlexGrid的全选择和全解除的实现","slug":"wijmo_03","date":"2019-08-09T04:00:00.000Z","updated":"2019-08-09T04:18:43.027Z","comments":true,"path":"2019/08/09/wijmo_03/","link":"","permalink":"http://yoursite.com/2019/08/09/wijmo_03/","excerpt":"","text":"首先，在WijimoJS的组件中，FlexGrid是最常用的数据集合组件。FlexGrid中如何绑定一个Checkbox呢，其实很简单加入第一列是一个Checkbox，绑定的数字元素叫No。只需要把这个No元素定义为Boolean类型，就可以自动显示出了CheckBox。 以下的例子代码是FlexGrid的全选择和接触的解决方法HTML代码 &lt;wj-flex-grid [headersVisibility]=&quot;&apos;Column&apos;&quot; [itemsSource]=&quot;data&quot; class=&quot;max-ht-315&quot; [allowSorting]=&quot;false&quot; [allowDragging]=&quot;&apos;None&apos;&quot; #flexGrid&gt; &lt;wj-flex-grid-column [header]=&quot;&apos;No.&apos;&quot; [binding]=&quot;&apos;no&apos;&quot; [width]=&quot;130&quot; [dataType]=&quot;2&quot; isReadOnly=&quot;true&quot;&gt; &lt;/wj-flex-grid-column&gt; &lt;wj-flex-grid-column [header]=&quot;&apos;AAAA&apos;&quot; [binding]=&quot;&apos;no&apos;&quot; [width]=&quot;130&quot; [dataType]=&quot;2&quot; isReadOnly=&quot;true&quot;&gt; &lt;ng-template wjFlexGridCellTemplate [cellType]=&quot;&apos;Cell&apos;&quot; let-item=&quot;item&quot; let-cell=&quot;cell&quot;&gt; &lt;div&gt;BBBB&lt;/div&gt; &lt;/ng-template&gt; &lt;ng-template wjFlexGridCellTemplate [cellType]=&quot;&apos;CellEdit&apos;&quot;&gt; &lt;/ng-template&gt; &lt;/wj-flex-grid-column&gt; &lt;/wj-flex-grid&gt; &lt;button #select type=&quot;button&quot; class=&quot;gyoumu-button&quot; (click)=&quot;zenSelect()&quot;&gt;全选择&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;gyoumu-button&quot; (click)=&quot;keijyo()&quot;&gt;全解除&lt;/button&gt;TS代码 import { Component, OnInit, ViewChild, AfterViewInit} from '@angular/core'; import { WjFlexGrid } from 'wijmo/wijmo.angular2.grid'; @Component({ selector: 'app-xxx0201', templateUrl: './xxx0201.component.html', styleUrls: ['./xxx0201.component.css'] }) export class xxx0201Component implements OnInit { @ViewChild('flexGrid') flexGrid: WjFlexGrid; data = [ { number: '1', select: true }, { number: '2', select: false }, { number: '3', select: false }, { number: '4', select: false } ]; constructor() { } ngOnInit() { } // 全选择 zenSelect() { const collectionView = this.flexGrid.collectionView; const items = collectionView.items; for (let i = 0; i < items.length; i++) { items[i].select = true; } this.flexGrid.refresh(); } // 全解除 keijyo() { const collectionView = this.flexGrid.collectionView; const items = collectionView.items; for (let i = 0; i < items.length; i++) { items[i].select = false; } this.flexGrid.refresh(); } }","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Wijmo","slug":"Wijmo","permalink":"http://yoursite.com/tags/Wijmo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"AngularJS的同步方法","slug":"angular_01","date":"2019-08-09T03:14:00.000Z","updated":"2019-08-09T03:15:39.428Z","comments":true,"path":"2019/08/09/angular_01/","link":"","permalink":"http://yoursite.com/2019/08/09/angular_01/","excerpt":"","text":"在项目中使用到了AngularJS框架，在异步操作在有些特殊情况下会有问题。寻求了同步的方法。 在项目是实验后，记录一下。 TypeScript: async init() { await this.getInitInfo(); } getInitInfo(): Promise { return new Promise ((fulfill, reject) => { this.pc_hpService.getSpc0205InitInfo(input_data, WindowIdEnum.PC02, WindowIdEnum.SPC0205) .subscribe(res => { fulfill(); }); }); } 注解：async 做为方法的同步标记 返回 Promise值，不可以有其他返回值await 标记哪个方法进行等待 实现的原理：首先把需要同步的方法加入async，然后异步→同步的方法前加入await，这样，当执行到getInitInfo的时候，方法就会等待返回结果后才进行下一步的操作。然后在getInitInfo方法中调用后台，因为调用后台操作是异步的，但是加入了Promise代码块中的代码就会等待 fulfill()方法的返回确认结果。 这样就实现了同步操作。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://yoursite.com/tags/AngularJS/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"FlexGrid的子Grid的实现方式","slug":"wijmo_02","date":"2019-08-08T06:45:00.000Z","updated":"2019-08-09T03:17:13.176Z","comments":true,"path":"2019/08/08/wijmo_02/","link":"","permalink":"http://yoursite.com/2019/08/08/wijmo_02/","excerpt":"","text":"参照官方提供的例子https://demo.grapecity.com.cn/wijmo5/learningwijmo/#KLYKp 运行效果如下 代码如下 // 点击+号 展开的事件 createDetailCell: function (row) { // let flextGridData:Array = this.flexGrid.itemsSource; // (+)ボタンイベント let cell = document.createElement('div'); detailGrid = new FlexGrid(cell, { autoGenerateColumns: false, itemsSource: row.dataItem.items, columns: detailHeader }); return cell; }, // 点击-号 展开的事件 disposeDetailCell: function (row) { let cell; } // 行绑定的事件：如果想要某一行包含+号，就在这个方法中设定 rowHasDetail: function(row) { return row.dataItem.no === 1; } // 全展开 detailAll() { this.dpGrid.showDetail(1); this.dpGrid.showDetail(0); } // 全闭合 hidenDetail(){ this.dpGrid.hideDetail(0); this.dpGrid.hideDetail(1); }","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Wijmo","slug":"Wijmo","permalink":"http://yoursite.com/tags/Wijmo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Hello Wijmo","slug":"wijmo_01","date":"2019-08-07T22:16:00.000Z","updated":"2019-08-07T22:31:50.652Z","comments":true,"path":"2019/08/08/wijmo_01/","link":"","permalink":"http://yoursite.com/2019/08/08/wijmo_01/","excerpt":"","text":"开始记录WIJMOJS的强大之处WijmoJS是葡萄城出品的针对于前台应用的轻量级组件。针对于Gird的FlexGrid和MuitRow针对于基本控件上做了2次开发的InputNumber等控件。 具体看参见官网https://www.grapecity.com.cn/developer/wijmojs 开发Wijmo应用是很痛苦的一件事，历时一年的项目。本身WijmoJS是一个收费组件，也提供技术支持，不过因为功能相对强大，使用起来小Bug还是很多的。与客户的业务相结合后，研究起来相对比较痛苦。 基本上Wijmo的资料在度娘上少之又少。推荐2个网站www.google.com(谷歌 需要翻墙)www.biying.com（微软的必应） 写这个博客就是要对一年的WIJMO研究成果做一个总结。希望以后还有机会能用到这个强大的WIJMOJS 资料查询网站1.包含很多例子https://demo.grapecity.com.cn/wijmo/demos/Grid/MultiRow/LayoutDefinition/purejs2.中文的学习指南https://demo.grapecity.com.cn/wijmo5/learningwijmo/#KLYKp3.TreeView 树形的例子https://demo.grapecity.com/wijmo/5/Angular2/TreeViewIntro/TreeViewIntro/4.FlexGrid的例子https://demo.grapecity.com/wijmo/5/Angular2/FlexGridIntro/FlexGridIntro/","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Wijmo","slug":"Wijmo","permalink":"http://yoursite.com/tags/Wijmo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"docker-WIN10系统下docker for window的安装和使用","slug":"docker_01","date":"2019-08-04T09:28:00.000Z","updated":"2019-08-17T11:41:48.654Z","comments":true,"path":"2019/08/04/docker_01/","link":"","permalink":"http://yoursite.com/2019/08/04/docker_01/","excerpt":"","text":"无意中在Spring Boot一书中看到了Docker，异常强大的一个虚拟系统。决定学习一下，就从如何在Window的环境配置开始。 本文转至：https://blog.csdn.net/qq_22211217/article/details/93926555 什么DockerDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 Docker 的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来并且各种各样的货物被集装箱标准化了， 集装箱和集装箱之间不会互相影响。那么我们不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘船把他们都运走。 docker的就在使用类似的想法。现在主要都是流行云计算，云计算就好比一艘货轮，docker就是其中的集装箱，主要目的就是用来搭送软件。 做为软件使用者，避免直接安装软件包，总是以Docker镜像形式获取软件、以Docker容器形式运行软件。做为软件开发者，避免直接发布软件包，总是以Docker镜像形式发布到Docker仓库。我们专业的技术人员， 有时候了解一个新的技术只需要了解这个技术是什么， 用到了什么思想，什么时候可以用到这样的新技术，这样就满足我们的需求了。 docker官网如下： https://www.docker.com/ 安装使用直接进官网下载docker for window 然后会提示先登录才能下载，此时需要点击sign in注册一个账号，登录后即可下载。下载完成后，双击安装，安装过程中全部选择默认即可，安装完成屏幕右下角会出现一个鲸鱼图标，此时已安装成功 右击此图标出现docker菜单 打开命令提示符，输入docker进行验证 此时docker安装已经全部结束，在这里可以试试hello world镜像 docker pull hello-world 然后输入 docker images 查看本机所有镜像。 接着运行一下hell-world镜像试试看，输入 docker run hello-world 出现下面结果，则运行成功 进入容器 docker exec -it aa4be2213bb6 /bin/bash 退出容器，在进入容器后，使用 exit 退出 进阶篇设置docker虚拟机位置（默认c盘 占用空间）docker托盘-》setting-》Advanced-》disk image location 自定义位置-》apply-》docker自动重启生效 配置镜像库位置docker托盘-》setting-》Daemom-》Registry mirrors 自定义位置-》apply-》docker自动重启生效 国内docker 镜像地址阿里云下载地址（linux）：https://hub.daocloud.io/阿里云下载地址（Mac）： http://mirrors.aliyun.com/docker-toolbox/mac/docker-for-mac/阿里云下载地址（Windows）： http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/ ##注意windows家庭版使用的linux容器版 只有windows专业版 可以通过切换为windows容器版","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"hexo-优美的博客框架构筑","slug":"hexo_01","date":"2019-08-04T09:22:00.000Z","updated":"2019-08-08T10:51:30.281Z","comments":true,"path":"2019/08/04/hexo_01/","link":"","permalink":"http://yoursite.com/2019/08/04/hexo_01/","excerpt":"","text":"1.前言1.1. 准备工作在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个；安装了node.js、npm，并了解相关基础知识；安装了git for windows（或者其它git客户端）本文所使用的环境： Windows8.1node.js@5.5.0git@1.9.2hexo@3.2.2 2.搭建github博客新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功；仓库名字必须是：username.github.io，其中username是你的用户名；仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 2.2. 绑定域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 3.配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 $ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 ssh-keygen -t rsa -C “邮件地址” 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 3.1 测试是否成功$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置：$ git config –global user.name “liuxianan”// 你的github用户名，非昵称$ git config –global user.email “xxx@qq.com“// 填写你的github注册邮箱 4.使用hexo写博客4.1 hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 4.2 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3. 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 4.4 安装$ npm install -g hexo 4.5. 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 $ cd /f/Workspaces/hexo_01/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： $ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 4.6 修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： $ cd /f/Workspaces/hexo_01/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题都在这里： 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 4.7. 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 4.8. 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master错误写法： deploy: type: github repository: https://github.com/liuxianan/liuxianan.github.io.git branch: master 后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行hexo d的话一般会报如下错误： Deployer not found: github 或者 Deployer not found: git原因是还需要安装一个插件： npm install hexo-deployer-git –save其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 4.9. 保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.10. 常用hexo命令常见命令 hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写： hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令： hexo s -g #生成并本地预览hexo d -g #生成并上传 4.11. _config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 4.12. 写博客定位到我们的hexo根目录，执行命令： hexo new ‘my-first-blog’hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下：title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格 description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面以下是正文 那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？ hexo new page “my-second-blog” 生成如下： 最终部署时生成：hexo\\public\\my-second-blog\\index.html，但是它不会作为文章出现在博文目录。 4.12.1. 写博客工具那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。 4.12.2. 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？答案是在合适的位置加上即可，例如： 前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等； 最终效果：","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}],"keywords":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}]},{"title":"切尔诺贝利","slug":"movie_qrnbl","date":"2019-08-01T15:59:00.000Z","updated":"2019-08-09T04:20:39.829Z","comments":true,"path":"2019/08/01/movie_qrnbl/","link":"","permalink":"http://yoursite.com/2019/08/01/movie_qrnbl/","excerpt":"","text":"HBO2019年，一部五集的短剧，让我从新认识到核武器的强大破坏力以及对未来无线的影响。 “历史上最严重的核电事故” “所释放出的辐射线剂量是广岛原子弹爆炸的400倍以上” “损失大概两千亿美元” “切尔诺贝利沦为鬼城” …… 切尔诺贝利的影响，间接的导致了前苏联的分裂。 简短的五集剧集中，参杂了人性，政治等因素的不断叠加，让人大呼过瘾。 印象比较深的几个情节。 在发生事故后，当地地方官极力掩盖事实的真相，为了保住自己的乌纱帽而无知的掩盖事实。其中最经典的莫过于 接下来就是无知的人们以为只是一个事故。消防员冲到了前线上去。有人捡起了地上的石墨，很快身体就别辐射。身体发生溃烂。第一批冲进去的消防员，几天后，全部相继死去。 城市中不明真相人，还在辐射中正常的过着生活。他们不知道的是，他们正被辐射着，这种辐射给他们带来了各种不治之症的发生。 最终真相很快被物理学家Valeri发现，并且向政府报告了情况。政府通过调查才意识到事件的严重性。政府开始了倾尽国力的救援。首先疏散群众，消灭一切被辐射的生物，动物。 然后用人的寿命作为代价，拯救了核电站的继续污染。 最后Valeri为了揭露真相，不惜牺牲自己作为代价。来向世人阐述了问题的根源。也让更过国家避免了灾难发生。在灾难面前，人是如此渺小与脆弱。 惨痛的代价。让我们深刻反省。能为我们带来无限能源的东西，也是一个能够埋葬我们的巨大炸弹。生活不要生活在无知中，要经常总结经验教训。 强烈推荐这部神剧。相当精彩。","categories":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/电影/"}],"tags":[{"name":"核辐射","slug":"核辐射","permalink":"http://yoursite.com/tags/核辐射/"},{"name":"历史","slug":"历史","permalink":"http://yoursite.com/tags/历史/"}],"keywords":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/电影/"}]},{"title":"新的开始","slug":"note_01","date":"2019-07-24T15:59:00.000Z","updated":"2019-08-01T15:46:59.440Z","comments":true,"path":"2019/07/24/note_01/","link":"","permalink":"http://yoursite.com/2019/07/24/note_01/","excerpt":"2019.7.24 23:53使用HEXO博客框架，发布于Github开源平台的博客今天开始弄了。给自己定个小目标。一周写3篇首先8月份要总结现在所用的技术，记录下来。AngularJS，Wijmo，Mybaits等。在保守期间，不断完善技术的积累。","text":"2019.7.24 23:53使用HEXO博客框架，发布于Github开源平台的博客今天开始弄了。给自己定个小目标。一周写3篇首先8月份要总结现在所用的技术，记录下来。AngularJS，Wijmo，Mybaits等。在保守期间，不断完善技术的积累。 坚持~~总会成功。Q","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}]}]}